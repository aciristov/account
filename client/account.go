// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "account": account Resource Client
//
// Command:
// $ goagen
// --design=account/design
// --out=$(GOPATH)/src/account
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUserAccountPayload is the account CreateUser action payload.
type CreateUserAccountPayload struct {
	// Email of account
	Email string `form:"email" json:"email" xml:"email"`
	// Name of account
	Name string `form:"name" json:"name" xml:"name"`
	// Password of account
	Password string `form:"password" json:"password" xml:"password"`
	// Username of account
	Username string `form:"username" json:"username" xml:"username"`
}

// CreateUserAccountPath computes a request path to the CreateUser action of account.
func CreateUserAccountPath() string {

	return fmt.Sprintf("/accounts")
}

// Create new account
func (c *Client) CreateUserAccount(ctx context.Context, path string, payload *CreateUserAccountPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUserAccountRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserAccountRequest create the request corresponding to the CreateUser action endpoint of the account resource.
func (c *Client) NewCreateUserAccountRequest(ctx context.Context, path string, payload *CreateUserAccountPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteUserAccountPath computes a request path to the DeleteUser action of account.
func DeleteUserAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/accounts/%s", param0)
}

// DeleteUserAccount makes a request to the DeleteUser action endpoint of the account resource
func (c *Client) DeleteUserAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteUserAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteUserAccountRequest create the request corresponding to the DeleteUser action endpoint of the account resource.
func (c *Client) NewDeleteUserAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetUserAccountPath computes a request path to the GetUser action of account.
func GetUserAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/accounts/%s", param0)
}

// Get account by ID
func (c *Client) GetUserAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetUserAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetUserAccountRequest create the request corresponding to the GetUser action endpoint of the account resource.
func (c *Client) NewGetUserAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateUserAccountPayload is the account UpdateUser action payload.
type UpdateUserAccountPayload struct {
	// Email of account
	Email string `form:"email" json:"email" xml:"email"`
	// Name of account
	Name string `form:"name" json:"name" xml:"name"`
	// Password of account
	Password string `form:"password" json:"password" xml:"password"`
	// Username of account
	Username string `form:"username" json:"username" xml:"username"`
}

// UpdateUserAccountPath computes a request path to the UpdateUser action of account.
func UpdateUserAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/accounts/%s", param0)
}

// change account attributes
func (c *Client) UpdateUserAccount(ctx context.Context, path string, payload *UpdateUserAccountPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateUserAccountRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserAccountRequest create the request corresponding to the UpdateUser action endpoint of the account resource.
func (c *Client) NewUpdateUserAccountRequest(ctx context.Context, path string, payload *UpdateUserAccountPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
