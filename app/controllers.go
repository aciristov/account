// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "account": Application Controllers
//
// Command:
// $ goagen
// --design=account/design
// --out=$(GOPATH)/src/account
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AccountController is the controller interface for the Account actions.
type AccountController interface {
	goa.Muxer
	CreateUser(*CreateUserAccountContext) error
	DeleteUser(*DeleteUserAccountContext) error
	GetUser(*GetUserAccountContext) error
	UpdateUser(*UpdateUserAccountContext) error
}

// MountAccountController "mounts" a Account resource controller on the given service.
func MountAccountController(service *goa.Service, ctrl AccountController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUserAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateUserAccountPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateUser(rctx)
	}
	service.Mux.Handle("POST", "/accounts", ctrl.MuxHandler("CreateUser", h, unmarshalCreateUserAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "CreateUser", "route", "POST /accounts")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteUserAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteUser(rctx)
	}
	service.Mux.Handle("DELETE", "/accounts/:accountID", ctrl.MuxHandler("DeleteUser", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "DeleteUser", "route", "DELETE /accounts/:accountID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetUserAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetUser(rctx)
	}
	service.Mux.Handle("GET", "/accounts/:accountID", ctrl.MuxHandler("GetUser", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "GetUser", "route", "GET /accounts/:accountID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUserAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateUserAccountPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateUser(rctx)
	}
	service.Mux.Handle("PUT", "/accounts/:accountID", ctrl.MuxHandler("UpdateUser", h, unmarshalUpdateUserAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "UpdateUser", "route", "PUT /accounts/:accountID")
}

// unmarshalCreateUserAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUserAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createUserAccountPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUserAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUserAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateUserAccountPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
