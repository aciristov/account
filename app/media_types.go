// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "account": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/account/design
// --out=$(GOPATH)/src/github.com/account
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
)

// Media type of account!!! (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// Email of account
	Email string `form:"email" json:"email" xml:"email"`
	// id of account
	ID int `form:"id" json:"id" xml:"id"`
	// Name of account
	Name string `form:"name" json:"name" xml:"name"`
	// Password of account
	Password string `form:"password" json:"password" xml:"password"`
	// Username of account
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	return
}
